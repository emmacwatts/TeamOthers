# %% [markdown]
# ### Data Clean up for Yield and Fertiliser
# 
# * Note on assumptions:
#     * averaged over the other variables in the yield_data dataset

# %%
#Imports
import pandas as pd
import openpyxl
import plotly.graph_objects as go
import nbformat


# %%
# Load the data
df = pd.read_csv('InputDataRaw/yield_data.csv')

display((df))

# %%
# Keep only the desired columns
cols_to_keep = ['harvest_year', 'cropping', 'k_amount', 'total_fertilizer_n_amount', 'p_amount', 'grain', 'straw', 'strip']
df = df[cols_to_keep]

# Filter rows where cropping is 'winter wheat'
df = df[df['cropping'] == 'winter wheat']
df = df[df['strip'] == 8]

df = df[((df['harvest_year'] >= 1990) & (df['harvest_year'] <= 2000)) | ((df['harvest_year'] >= 2010) & (df['harvest_year'] <= 2020))]

# Reset index
df = df.reset_index(drop=True)

# Optionally, display the cleaned dataframe
display(df)

# %%
#Add weather data to master dataframe

# Load yearly weather data
weather_df = pd.read_csv('InputDataRaw/weather_data_yearly_cleaned.csv')

# Merge weather data into main df on 'harvest_year'
df = pd.merge(df, weather_df, left_on='harvest_year', right_on='year', how='left')

# Optionally, drop the duplicate 'year' column from weather data
df = df.drop(columns=['year'])

# Display merged dataframe
display(df)

# %%
# Add insect data

# Load yearly insect data for both periods
insect_90s = pd.read_csv('TeamOthers/FilteredInput/RISdata_1990_2000_yearly.csv')
insect_10s = pd.read_csv('TeamOthers/FilteredInput/RISdata_2010_2020yearly.csv')

# Combine both periods
insect_df = pd.concat([insect_90s, insect_10s], ignore_index=True)

# Pivot to get one column per species, values are yearly totals
insect_pivot = insect_df.pivot_table(
    index='Year',
    columns='Insect',
    values='Total',
    aggfunc='sum'
)

# Rename columns to match requested format
insect_pivot = insect_pivot.rename(columns=lambda x: f'total_{x}')

# Reset index to make 'Year' a column
insect_pivot = insect_pivot.reset_index()

# Merge with master dataframe on year
df = pd.merge(df, insect_pivot, left_on='harvest_year', right_on='Year', how='left')

# Optionally, drop the duplicate 'Year' column
df = df.drop(columns=['Year'])

# Display updated dataframe
display(df)


# %%
## Add GHG estimates

# IPCC emission factors & conversion values
EF1 = 0.01  # direct N2O-N emission factor
FracGASF, EF4 = 0.1, 0.01
FracLEACH, EF5 = 0.3, 0.0075
GWP_N2O = 273
conv = 44/28

# Upstream emission factors (kg CO2e / kg nutrient)
EF_N, EF_P, EF_K = 5.5, 1.0, 0.6

def calc_emissions(row):
    N = row['total_fertilizer_n_amount']
    P = row['p_amount']
    K = row['k_amount']

    # Direct N2O
    n2o_n_direct = N * EF1
    # Indirect N2O
    n2o_n_vol = N * FracGASF * EF4
    n2o_n_leach = N * FracLEACH * EF5

    n2o_total = (n2o_n_direct + n2o_n_vol + n2o_n_leach) * conv
    co2e_field = n2o_total * GWP_N2O

    # Upstream
    co2e_upstream = (N * EF_N) + (P * EF_P) + (K * EF_K)

    return pd.Series({
        "CO2e_total_kg": co2e_field + co2e_upstream
    })

df = df.join(df.apply(calc_emissions, axis=1))

display(df)

#Source/Justification for upstream EF values (EF_N, EF_P, EF_K):

#CarbonChain reports ~2.6 kg CO₂e/kg for N fertilizer production; P ~1.7 kg CO₂e/kg; K ~0.6 kg CO₂e/kg. carbonchain.com
#Fertilizer Europe & other industrial LCA studies show N fertilizer production emissions can vary between ~3-10 kg CO₂e/kg N depending on energy source and process. fertilizerseurope.com
#IPCC 2006/2019 Guideline refinements provide default emission factors for soil emissions from N application (direct plus indirect). ipcc-nggip.iges.or.jp

# %%
## Export

df.to_excel('FilteredInput/cleaned_yield_data.xlsx', index=False)

# %%
import numpy as np

# Replace '*' with NaN and convert columns to numeric
df['grain'] = pd.to_numeric(df['grain'].replace('*', np.nan))
df['straw'] = pd.to_numeric(df['straw'].replace('*', np.nan))

# Now proceed with your summary and stderr calculations
numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
summary_df = df.groupby('harvest_year')[numeric_cols].mean()
stderr_df = df.groupby('harvest_year')[numeric_cols].agg(lambda x: np.std(x, ddof=1) / np.sqrt(len(x)))

# Export both to Excel (each as a separate sheet)
with pd.ExcelWriter('FilteredInput/yield_summary.xlsx') as writer:
    summary_df.to_excel(writer, sheet_name='Mean')
    stderr_df.to_excel(writer, sheet_name='StdError')

display(summary_df)
display(stderr_df)

# %%
#### KEEP
#This is to show yield of grain and straw over time for the two time periods.
#Description: from this plot, we can see the trends in winter wheat yield of grain and straw over the periods 1990-2000, and 2010-2020. 

import plotly.graph_objects as go

# 1990-2000
summary_90s = summary_df.loc[(summary_df.index >= 1990) & (summary_df.index <= 2000)]
stderr_90s = stderr_df.loc[(stderr_df.index >= 1990) & (stderr_df.index <= 2000)]

fig_90s = go.Figure()

fig_90s.add_trace(go.Scatter(
    x=summary_90s.index,
    y=summary_90s['grain'],
    error_y=dict(type='data', array=stderr_90s['grain']),
    mode='lines+markers',
    name='Grain'
))
fig_90s.add_trace(go.Scatter(
    x=summary_90s.index,
    y=summary_90s['straw'],
    error_y=dict(type='data', array=stderr_90s['straw']),
    mode='lines+markers',
    name='Straw'
))
fig_90s.update_layout(title='Grain and Straw (1990-2000)', xaxis_title='Harvest Year', yaxis_title='Yield (t/ha at 85% dry matter)', legend_title='Variable')
fig_90s.show()

# 2010-2020
summary_10s = summary_df.loc[(summary_df.index >= 2010) & (summary_df.index <= 2020)]
stderr_10s = stderr_df.loc[(stderr_df.index >= 2010) & (stderr_df.index <= 2020)]

fig_10s = go.Figure()

fig_10s.add_trace(go.Scatter(
    x=summary_10s.index,
    y=summary_10s['grain'],
    error_y=dict(type='data', array=stderr_10s['grain']),
    mode='lines+markers',
    name='Grain'
))
fig_10s.add_trace(go.Scatter(
    x=summary_10s.index,
    y=summary_10s['straw'],
    error_y=dict(type='data', array=stderr_10s['straw']),
    mode='lines+markers',
    name='Straw'
))
fig_10s.update_layout(title='Grain and Straw (2010-2020)', xaxis_title='Harvest Year', yaxis_title='Yield (t/ha at 85% dry matter)', legend_title='Variable')
fig_10s.show()

# %%
### KEEP 
#Feriliser use over the two time periods
#Description: You can see that from the first to second time periods, fertiliser use has changed. Phosphorus is no longer applied as existing phosphorus in the soil is sufficient. We discuss the impacts of this on grain yield, insect abundance, and other factors below. 

# Calculate mean fertiliser use for each period
fert_90s = summary_df.loc[(summary_df.index >= 1990) & (summary_df.index <= 2000)][['total_fertilizer_n_amount', 'p_amount', 'k_amount']].mean()
fert_10s = summary_df.loc[(summary_df.index >= 2010) & (summary_df.index <= 2020)][['total_fertilizer_n_amount', 'p_amount', 'k_amount']].mean()

# 1990-2000 Pie Chart
fig_90s_pie = go.Figure(data=[go.Pie(
    labels=['Nitrogen', 'Phosphorus', 'Potassium'],
    values=[fert_90s['total_fertilizer_n_amount'], fert_90s['p_amount'], fert_90s['k_amount']],
    hole=0.3
)])
fig_90s_pie.update_layout(title='Fertiliser Use Split (1990-2000)')
fig_90s_pie.show()

# 2010-2020 Pie Chart
fig_10s_pie = go.Figure(data=[go.Pie(
    labels=['Nitrogen', 'Phosphorus', 'Potassium'],
    values=[fert_10s['total_fertilizer_n_amount'], fert_10s['p_amount'], fert_10s['k_amount']],
    hole=0.3
)])
fig_10s_pie.update_layout(title='Fertiliser Use Split (2010-2020)')
fig_10s_pie.show()

# %% [markdown]
# 

# %%



